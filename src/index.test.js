import opfront from './index'
import * as lib from './index'
import Resource from './resource/resource'

test('default export defines an object with all functions as interface', () => {
  expect(opfront).toBeInstanceOf(Object)
  expect(Object.keys(opfront).length).toEqual(14)
  expect(Object.keys(opfront)).toContainEqual('authenticate')
  expect(Object.keys(opfront)).toContainEqual('authenticateWithToken')
  expect(Object.keys(opfront)).toContainEqual('configureUrl')
  expect(Object.keys(opfront)).toContainEqual('Auth')
  expect(Object.keys(opfront)).toContainEqual('Spectacle')
  expect(Object.keys(opfront)).toContainEqual('Product')
  expect(Object.keys(opfront)).toContainEqual('Order')
  expect(Object.keys(opfront)).toContainEqual('Store')
  expect(Object.keys(opfront)).toContainEqual('Banner')
  expect(Object.keys(opfront)).toContainEqual('ApiVersion')
  expect(Object.keys(opfront)).toContainEqual('Event')
  expect(Object.keys(opfront)).toContainEqual('User')
  expect(Object.keys(opfront)).toContainEqual('version')
  expect(Object.keys(opfront)).toContainEqual('Connector')
})

test('lib exports same functions as independent exports', () => {
  expect(lib.authenticate).toBeInstanceOf(Function)
  expect(lib.authenticate).toEqual(opfront.authenticate)
  expect(lib.authenticateWithToken).toBeInstanceOf(Function)
  expect(lib.authenticateWithToken).toEqual(opfront.authenticateWithToken)
  expect(lib.configureUrl).toBeInstanceOf(Function)
  expect(lib.configureUrl).toEqual(opfront.configureUrl)
  expect(lib.Spectacle).toBeInstanceOf(Resource)
  expect(lib.Spectacle).toEqual(opfront.Spectacle)
  expect(lib.Product).toBeInstanceOf(Resource)
  expect(lib.Product).toEqual(opfront.Product)
  expect(lib.Order).toBeInstanceOf(Resource)
  expect(lib.Order).toEqual(opfront.Order)
  expect(lib.Store).toBeInstanceOf(Resource)
  expect(lib.Store).toEqual(opfront.Store)
  expect(lib.Banner).toBeInstanceOf(Resource)
  expect(lib.Banner).toEqual(opfront.Banner)
  expect(lib.ApiVersion).toEqual(opfront.ApiVersion)
  expect(lib.Event).toEqual(opfront.Event)
  expect(lib.User).toBeInstanceOf(Resource)
  expect(lib.User).toEqual(opfront.User)
  expect(lib.version).toBeDefined()
  expect(lib.version).toEqual(opfront.version)
  expect(lib.Auth).toBeDefined()
  expect(lib.Auth).toEqual(opfront.Auth)
  expect(lib.Connector).toBeDefined()
  expect(lib.Connector).toEqual(opfront.Connector)
})
